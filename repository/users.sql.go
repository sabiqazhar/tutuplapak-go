// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password)
VALUES ($1, $2)
    RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email    sql.NullString `json:"email"`
	Password string         `json:"password"`
}

type CreateUserRow struct {
	ID        int32          `json:"id"`
	Email     sql.NullString `json:"email"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

// Authentication queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createUserWithEmail = `-- name: CreateUserWithEmail :one
INSERT INTO users (email, password, phone)
VALUES ($1, $2, $3)
    RETURNING id, email, phone, created_at
`

type CreateUserWithEmailParams struct {
	Email    sql.NullString `json:"email"`
	Password string         `json:"password"`
	Phone    sql.NullString `json:"phone"`
}

type CreateUserWithEmailRow struct {
	ID        int32          `json:"id"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateUserWithEmail(ctx context.Context, arg CreateUserWithEmailParams) (CreateUserWithEmailRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithEmail, arg.Email, arg.Password, arg.Phone)
	var i CreateUserWithEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const createUserWithPhone = `-- name: CreateUserWithPhone :one
INSERT INTO users (phone, password, email)
VALUES ($1, $2, $3)
    RETURNING id, phone, email, created_at
`

type CreateUserWithPhoneParams struct {
	Phone    sql.NullString `json:"phone"`
	Password string         `json:"password"`
	Email    sql.NullString `json:"email"`
}

type CreateUserWithPhoneRow struct {
	ID        int32          `json:"id"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateUserWithPhone(ctx context.Context, arg CreateUserWithPhoneParams) (CreateUserWithPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithPhone, arg.Phone, arg.Password, arg.Email)
	var i CreateUserWithPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone, password, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int32          `json:"id"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	Password  string         `json:"password"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, password, created_at, updated_at
FROM users
WHERE id = $1
`

// Profile management queries
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone, email, password, created_at
FROM users
WHERE phone = $1
`

type GetUserByPhoneRow struct {
	ID        int32          `json:"id"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
	Password  string         `json:"password"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone sql.NullString) (GetUserByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const linkEmailToUser = `-- name: LinkEmailToUser :one
UPDATE users
SET
    email = $2,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type LinkEmailToUserParams struct {
	ID    int32          `json:"id"`
	Email sql.NullString `json:"email"`
}

type LinkEmailToUserRow struct {
	ID                int32          `json:"id"`
	FileID            sql.NullInt32  `json:"file_id"`
	Email             sql.NullString `json:"email"`
	Phone             sql.NullString `json:"phone"`
	BankAccountName   sql.NullString `json:"bank_account_name"`
	BankAccountHolder sql.NullString `json:"bank_account_holder"`
	BankAccountNumber sql.NullString `json:"bank_account_number"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
}

func (q *Queries) LinkEmailToUser(ctx context.Context, arg LinkEmailToUserParams) (LinkEmailToUserRow, error) {
	row := q.db.QueryRowContext(ctx, linkEmailToUser, arg.ID, arg.Email)
	var i LinkEmailToUserRow
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const linkPhoneToUser = `-- name: LinkPhoneToUser :one
UPDATE users
SET
    phone = $2,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type LinkPhoneToUserParams struct {
	ID    int32          `json:"id"`
	Phone sql.NullString `json:"phone"`
}

type LinkPhoneToUserRow struct {
	ID                int32          `json:"id"`
	FileID            sql.NullInt32  `json:"file_id"`
	Email             sql.NullString `json:"email"`
	Phone             sql.NullString `json:"phone"`
	BankAccountName   sql.NullString `json:"bank_account_name"`
	BankAccountHolder sql.NullString `json:"bank_account_holder"`
	BankAccountNumber sql.NullString `json:"bank_account_number"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
}

func (q *Queries) LinkPhoneToUser(ctx context.Context, arg LinkPhoneToUserParams) (LinkPhoneToUserRow, error) {
	row := q.db.QueryRowContext(ctx, linkPhoneToUser, arg.ID, arg.Phone)
	var i LinkPhoneToUserRow
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    file_id = $2,
    bank_account_name = $3,
    bank_account_holder = $4,
    bank_account_number = $5,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID                int32          `json:"id"`
	FileID            sql.NullInt32  `json:"file_id"`
	BankAccountName   sql.NullString `json:"bank_account_name"`
	BankAccountHolder sql.NullString `json:"bank_account_holder"`
	BankAccountNumber sql.NullString `json:"bank_account_number"`
}

type UpdateUserProfileRow struct {
	ID                int32          `json:"id"`
	FileID            sql.NullInt32  `json:"file_id"`
	Email             sql.NullString `json:"email"`
	Phone             sql.NullString `json:"phone"`
	BankAccountName   sql.NullString `json:"bank_account_name"`
	BankAccountHolder sql.NullString `json:"bank_account_holder"`
	BankAccountNumber sql.NullString `json:"bank_account_number"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UpdateUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.ID,
		arg.FileID,
		arg.BankAccountName,
		arg.BankAccountHolder,
		arg.BankAccountNumber,
	)
	var i UpdateUserProfileRow
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
